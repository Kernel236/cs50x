Random sorted file test ./sort1:
random5000        0.03s user 0.00s system 99% cpu 0.028 total
random10000       0.10s user 0.01s system 99% cpu 0.108 total
random50000       3.90s user 0.04s system 99% cpu 3.964 total

Random sorted file test ./sort2:
random5000        0.00s user 0.01s system 95% cpu 0.010 total
random10000       0.01s user 0.01s system 98% cpu 0.015 total
random50000       0.02s user 0.04s system 98% cpu 0.065 total

Random sorted file test ./sort3:
random5000        0.01s user 0.01s system 97% cpu 0.016 total
random10000       0.04s user 0.01s system 99% cpu 0.051 total
random50000       0.85s user 0.04s system 99% cpu 0.898 total

Algorithm used by program sort2 seems to be significantly faster than the other in sorting random number

ALREADY sorted number, evaluating the big Omega, the best possible case

Sorted file test ./sort1:
sorted5000.txt  0.00s user 0.01s system 94% cpu 0.007 total
sorted10000.txt  0.00s user 0.01s system 52% cpu 0.035 total
sorted50000.txt  0.01s user 0.05s system 98% cpu 0.054 total

Sorted file test ./sort2:
sorted5000.txt  0.00s user 0.01s system 97% cpu 0.009 total
sorted10000.txt  0.00s user 0.02s system 71% cpu 0.030 total
sorted50000.txt  0.01s user 0.04s system 93% cpu 0.060 total

Sorted file test ./sort3:
sorted5000.txt  0.01s user 0.01s system 97% cpu 0.017 total
sorted10000.txt  0.04s user 0.01s system 98% cpu 0.049 total
sorted50000.txt  0.90s user 0.05s system 99% cpu 0.942 total

The algorithm in sort1 highly performed in already sorted rether than random. Seems to be booblesort behaviour!

REVERSED Number evaluate the big O, the worst possible case

Reversed file test ./sort1:
reversed5000.txt  0.03s user 0.00s system 98% cpu 0.032 total
reversed10000.txt  0.10s user 0.01s system 99% cpu 0.110 total
reversed50000.txt  2.24s user 0.05s system 99% cpu 2.284 total

Reversed file test ./sort2:
reversed5000.txt  0.00s user 0.01s system 93% cpu 0.010 total
reversed10000.txt  0.01s user 0.02s system 95% cpu 0.030 total
reversed50000.txt  0.02s user 0.04s system 99% cpu 0.066 total

Reversed file test ./sort3:
reversed5000.txt  0.01s user 0.00s system 97% cpu 0.017 total
reversed10000.txt  0.04s user 0.01s system 99% cpu 0.050 total
reversed50000.txt  0.90s user 0.04s system 98% cpu 0.951 total

Results
sort1 is using BOOBLE sort algorithm
sort2 is using MERGE sort algorithm 
sort3 is using SELECTION sort algorithm
